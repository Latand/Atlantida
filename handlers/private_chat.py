from aiogram import types
from aiogram.dispatcher.storage import FSMContext

from app import dp, logging
from utils.database import add_category
from utils.filters import IsPrivate
from utils.pagination import create_pages, page_change
from utils.states import Registration


@dp.message_handler(IsPrivate(), commands=["start"])
async def start(message: types.Message):
    text = "üèõ –ß—Ç–æ–±—ã –Ω–∞–ª–∞–¥–∏—Ç—å ‚ö°Ô∏è—Å–≤—è–∑—å –≤ ‚òÄÔ∏è–ê—Ç–ª–∞–Ω—Ç–∏–¥–µ - –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω—ë–º –∫–æ–º–∞–Ω–¥—É " \
           "/connect"
    await message.answer(text)


@dp.message_handler(IsPrivate(), commands=["cancel"], state=Registration.WaitForCategory)
async def no_state_text(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ì–æ—Ç–æ–≤–æ")


@dp.message_handler(IsPrivate(), state=Registration.WaitForCategory)
async def category_text(message: types.Message, state: FSMContext):
    category = message.text
    data = await state.get_data()
    await state.finish()
    chat = data.get("chat_id")
    add_category(chat, category)
    await message.answer(f"üèõ –í—ã —Ä–∞—Å–ø–æ–ª–æ–∂–∏–ª–∏—Å—å –≤ üèò {category}. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è üè° –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É connect –≤ –í–∞—à–µ–º üè°–∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ")


@dp.callback_query_handler(IsPrivate(), page_change.filter(), state=Registration.WaitForCategory)
async def page_change_call(call: types.CallbackQuery, callback_data: dict):
    action = callback_data.get("action")
    current_page = int(callback_data.get("current"))

    new_page = {
        "+": current_page + 1,
        "-": current_page - 1
    }[action]

    markup = create_pages(new_page)
    if not markup:
        new_page_text = "–°–ª–µ–¥—É—é—â–µ–π" if action == "+" else "–ü—Ä–µ–¥—ã–¥—É—â–µ–π"
        await call.answer(f"{new_page_text} —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    else:
        await call.message.edit_reply_markup(markup)


@dp.callback_query_handler(IsPrivate(), state=Registration.WaitForCategory)
async def category_call(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()

    category = call.data
    data = await state.get_data()
    await state.finish()
    chat = data.get("chat_id")
    add_category(chat, category)
    await call.message.answer(f"üèõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! ‚ö°Ô∏è–°–≤—è–∑—å —Å üèò {category} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")


@dp.callback_query_handler(IsPrivate())
async def no_state_call(call: types.CallbackQuery, state: FSMContext):
    logging.info(f"{state}")
    await call.message.edit_reply_markup()
    
    category = call.data
    data = await state.get_data()
    await state.finish()
    chat = data.get("chat_id")
    add_category(chat, category)
    await call.message.answer(f"üèõ –£ –í–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ üèò {category} –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —É–∫–∞–∑–∞–≤ –≤ –Ω—É–∂–Ω–æ–º üè° —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ –∫–æ–º–∞–Ω–¥—É"
                              "/connect")


@dp.message_handler(IsPrivate(), commands=["register"])
async def no_state_text(message: types.Message, state: FSMContext):
    await message.answer("üèõ –î–∞ –Ω–µ –∑–¥–µ—Å—å –∂–µ, –∞ –≤ –≥—Ä—É–ø–ø–µ! üåû")


@dp.message_handler(IsPrivate())
async def no_state_text(message: types.Message, state: FSMContext):
    logging.info(f"{state}")
