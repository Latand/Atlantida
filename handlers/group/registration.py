from aiogram import types
from aiogram.dispatcher.storage import FSMContext

from app import dp, bot, logging, _
from utils.database import add_chat
from utils.filters import IsGroup
from utils.keyboard_maker import ListOfButtons
from utils.states import Registration

from aiogram.utils.callback_data import CallbackData

language_callback = CallbackData("language", "code")


@dp.message_handler(IsGroup(), commands=["connect"])
async def register_chat(message: types.Message):
    chat_id = message.from_user.id
    admins = await message.chat.get_administrators()
    for admin in admins:
        if chat_id == admin.user.id:
            await message.reply(_("üè° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –î–æ–º–æ–π!\n"
                                  "üèõ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –õ–° –∏ —É–∫–∞–∂–∏—Ç–µ –í–∞—à–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"))
            exists = add_chat(message.chat.id)

            if exists:
                text = _("üèõ –í–∞—à–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ. "
                         "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –í–∞—à–µ–≥–æ üè°—á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞\n"
                         "–î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
            else:
                text = _("üèõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à üè°—á–∞—Ç/–∫–∞–Ω–∞–ª ‚ö°Ô∏è—Å–≤—è–∑–∞–Ω —Å ‚òÄÔ∏è–ê—Ç–ª–∞–Ω—Ç–∏–¥–æ–π. "
                         "–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –í–∞—à–µ–≥–æ üè°—á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞\n"
                         "–î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")

            language_keyboard = ListOfButtons(
                text=["English", "–†—É—Å—Å–∫–∏–π", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"],
                callback=[language_callback.new(code="en"),
                          language_callback.new(code="ru"),
                          language_callback.new(code="uk")]
            ).inline_keyboard

            await bot.send_message(chat_id, text,
                                   reply_markup=language_keyboard)
            await dp.current_state(chat=chat_id, user=chat_id).set_state(Registration.Language)
            await dp.current_state(chat=chat_id, user=chat_id).update_data(chat_id=message.chat.id)
            break
    else:
        await message.answer(_("üèõ –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. \n"
                               "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤"))
        logging.info("User is not an admin")


@dp.message_handler(IsGroup())
async def other(message: types.Message, state: FSMContext):
    state = await state.get_state()
    # logging.info(f"what? %s %s", message.text, state)
