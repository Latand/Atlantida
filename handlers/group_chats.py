from aiogram import types
from aiogram.dispatcher.storage import FSMContext

from app import dp, bot, logging

from utils.filters import IsGroup, AskedQuestion, AnsweredQuestion
from utils.pagination import create_pages
from utils.states import Registration
from utils.phases import Phase
import asyncio
from utils.database import add_chat, add_question, add_answer, get_winner_question_id

from aiogram.dispatcher import filters

p: Phase = None


@dp.message_handler(IsGroup(), filters.RegexpCommandsFilter(regexp_commands=['Atlantide ([0-9]*)']))
async def register_chat(message: types.Message, regexp_command):
    chat_id = message.from_user.id
    global p
    if p and p.running:
        a = "–≤–æ–ø—Ä–æ—Å—ã" if p.current == p.QUESTIONS else "–æ—Ç–≤–µ—Ç—ã"
        return await message.answer(
            f"üèõ –ö–ê–¢–ï–ì–û–†–ò–Ø –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {a}, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ–∞–Ω—Å–∞ —Å–≤—è–∑–∏")
    timeout = int(regexp_command.group(1))
    if 1 < timeout < 180:
        p = Phase(timeout=timeout * 60)
        await message.answer("üèõ –°–≤—è–∑—å —Å –ö–ê–¢–ï–ì–û–†–ò–Ø —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        asyncio.ensure_future(p.start_phaser())
    else:
        await message.answer("üèõ –ü—Ä–æ—Å–∏–º —É –í–∞—Å –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞ —Å–≤—è–∑–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 2—Ö –¥–æ 180 –º–∏–Ω—É—Ç (3 –ß–∞—Å–∞).")


@dp.message_handler(IsGroup(), commands=["Atlantide"])
async def register_chat(message: types.Message):
    await message.answer("üèõ –î–ª—è —Å–≤—è–∑–∏ —Å –ö–ê–¢–ï–ì–û–†–ò–Ø –≤–≤–µ–¥–∏—Ç–µ /Atlantide 10\n"
                         "–ì–¥–µ 10 - –≤—Ä–µ–º—è –æ–¥–Ω–æ–≥–æ —Å–µ–∞–Ω—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö .")


@dp.message_handler(IsGroup(), commands=["register"])
async def register_chat(message: types.Message):
    chat_id = message.from_user.id
    admins = await message.chat.get_administrators()
    for admin in admins:
        if chat_id == admin.user.id:
            await message.reply("üè° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –î–æ–º–æ–π!\n"
                                "üèõ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –õ–° –¥–ª—è –≤—ã–±–æ—Ä–∞ –í–∞—à–µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è")
            exists = add_chat(message.chat.id)
            markup = create_pages()

            if exists:
                text = "üèõ –í–∞—à–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –í–∞—à–µ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
            else:
                text = "üèõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —á–∞—Ç —Å–≤—è–∑–∞–Ω —Å ‚òÄÔ∏è–ê—Ç–ª–∞–Ω—Ç–∏–¥–æ–π. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –í–∞—à–µ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:"
            text += "\n\n" \
                    "–ù–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            await bot.send_message(chat_id, text,
                                   reply_markup=markup)
            await dp.current_state(chat=chat_id, user=chat_id).set_state(Registration.WaitForCategory)
            await dp.current_state(chat=chat_id, user=chat_id).update_data(chat_id=message.chat.id)
            break
    else:
        logging.info("User is not an admin")


@dp.message_handler(AskedQuestion())
async def asked_question(message: types.Message):
    chat_id = message.chat.id
    if p and p.running:
        if p.current == "Questions":
            question = message.text[3:]
            poll = await bot.send_poll(
                chat_id=message.chat.id,
                reply_to_message_id=message.message_id,
                question=f"üèõ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –ö–ê–¢–ï–ì–û–†–ò–Ø ?\n" 
                f"‚è± {p.time_left // 60} –º–∏–Ω",
                options=["‚úä–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å!", "‚òÅÔ∏è"],
                disable_notification=True)

            add_question(chat_id, question, message.message_id, poll.message_id)
        else:
            a = "–≤–æ–ø—Ä–æ—Å—ã" if p.current == p.QUESTIONS else "–æ—Ç–≤–µ—Ç—ã –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É"
            text = f"–ö–ê–¢–ï–ì–û–†–ò–Ø –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {a}, –æ–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ {p.time_left // 60} –º–∏–Ω\n"
            q_id = get_winner_question_id(chat_id)
            logging.info(f"QUID {q_id}")
            reply = None
            if q_id:
                text += f" –ö–ê–¢–ï–ì–û–†–ò–Ø –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å"
                reply = q_id
            await bot.send_message(chat_id, text, reply_to_message_id=reply)
    else:
        await message.answer("üèõ –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–µ–∞–Ω—Å–∞ —Å–≤—è–∑–∏ —Å –ö–ê–¢–ï–ì–û–†–ò–Ø –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /Atlantide")


@dp.message_handler(AnsweredQuestion())
async def asked_question(message: types.Message):
    chat_id = message.chat.id
    if p and p.running:
        if p.current == "Answers":
            answer = message.text

            poll = await bot.send_poll(
                chat_id=message.chat.id,
                reply_to_message_id=message.message_id,
                question=f"üèõ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –ö–ê–¢–ï–ì–û–†–ò–Ø? \n{p.time_left // 60} –º–∏–Ω",
                options=["‚úä –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å!", "‚òÅÔ∏è"],
                disable_notification=True)

            add_answer(chat_id, answer, message.message_id, poll.message_id)
        else:
            a = "–≤–æ–ø—Ä–æ—Å—ã" if p.current == p.QUESTIONS else "–æ—Ç–≤–µ—Ç—ã –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É"
            text = f"üèõ –í–∞—à–∞ –ö–ê–¢–ï–ì–û–†–ò–Ø –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {a}, –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ–∞–Ω—Å–∞ {p.time_left // 60} –º–∏–Ω\n"
            await message.answer(text)
    else:
        await message.answer("üèõ –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–µ–∞–Ω—Å–∞ —Å–≤—è–∑–∏ —Å –ö–ê–¢–ï–ì–û–†–ò–Ø –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /Atlantide")


@dp.message_handler(IsGroup())
async def other(message: types.Message, state: FSMContext):
    state = await state.get_state()
    logging.info(f"what? %s %s", message.text, state)
