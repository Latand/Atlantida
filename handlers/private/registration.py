from aiogram import types
from aiogram.dispatcher.storage import FSMContext

from app import dp, logging, _
from utils.database import add_category
from utils.filters import IsPrivate
from utils.pagination import create_pages, page_change
from utils.states import Registration
from aiogram.utils.callback_data import CallbackData

language_callback = CallbackData("language", "code")


@dp.callback_query_handler(IsPrivate(), language_callback.filter(), state=Registration.Language)
async def choose_language(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    language = callback_data.get("code")
    markup = create_pages(language=language)
    await state.update_data(language=language)
    text = _("–Ø–∑—ã–∫ {language} –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n").format(language=language)
    text += _("–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –í–∞—à–µ–≥–æ üè°—á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:\n")
    text += _("\n\n"
              "–ù–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    await call.message.edit_text(text, reply_markup=markup)
    await Registration.next()


@dp.message_handler(IsPrivate(), state=Registration.WaitForCategory)
async def category_text(message: types.Message, state: FSMContext):
    category = message.text
    if len(category) > 50:
        return await message.answer(_("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"))
    data = await state.get_data()
    await state.finish()
    chat = data.get("chat_id")
    language = data.get("language")
    add_category(chat, category, language)
    await message.answer(_("üèõ –í—ã —Ä–∞—Å–ø–æ–ª–æ–∂–∏–ª–∏—Å—å –≤ üèò {category}. "
                           "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è üè° –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É connect –≤ –í–∞—à–µ–º üè°–∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ\n"
                           ).format(category=category))


@dp.callback_query_handler(IsPrivate(), page_change.filter(), state=Registration.WaitForCategory)
async def page_change_call(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    action = callback_data.get("action")
    current_page = int(callback_data.get("current"))

    data = await state.get_data()
    language = data.get("language")
    new_page = {
        "+": current_page + 1,
        "-": current_page - 1
    }[action]

    markup = create_pages(new_page, language)
    if not markup:
        new_page_text = _("–°–ª–µ–¥—É—é—â–µ–π") if action == "+" else _("–ü—Ä–µ–¥—ã–¥—É—â–µ–π")
        await call.answer(_("{new_page_text} —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç").format(new_page_text=new_page_text))

    else:
        await call.message.edit_reply_markup(markup)


@dp.callback_query_handler(IsPrivate(), state=Registration.WaitForCategory)
async def category_call(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    category = call.data
    data = await state.get_data()
    await state.finish()

    chat = data.get("chat_id")
    language = data.get("language")
    add_category(chat, category, language)

    await call.message.answer(_("üèõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! ‚ö°Ô∏è–°–≤—è–∑—å —Å üèò {category} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n").format(
        category=category))
