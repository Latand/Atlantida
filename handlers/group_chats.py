from aiogram import types
from aiogram.dispatcher.storage import FSMContext

from app import dp, bot, logging

from utils.filters import IsGroup, AskedQuestion, AnsweredQuestion
from utils.pagination import create_pages
from utils.states import Registration
from utils.phases import Phase
import asyncio
from utils.database import add_chat, add_question, add_answer, get_winner_question_id

p: Phase = None


@dp.message_handler(IsGroup(), commands=["Atlantide"])
async def register_chat(message: types.Message):
    chat_id = message.from_user.id
    global p
    if p and p.running:
        a = "–≤–æ–ø—Ä–æ—Å—ã" if p.current == p.QUESTIONS else "–æ—Ç–≤–µ—Ç—ã"
        return await message.answer(f"‚òÄÔ∏è–ê—Ç–ª–∞–Ω—Ç–∏–¥–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {a}, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
    p = Phase()
    await message.answer("üè°–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –¥–æ–º–æ–π")
    asyncio.ensure_future(p.start_phaser())


@dp.message_handler(IsGroup(), commands=["register"])
async def register_chat(message: types.Message):
    chat_id = message.from_user.id
    admins = await message.chat.get_administrators()
    for admin in admins:
        if chat_id == admin.user.id:
            await message.reply("–ù–∞–ø–∏—Å–∞–ª –≤ –ª—Å.")
            exists = add_chat(message.chat.id)
            markup = create_pages()

            if exists:
                text = "–ß–∞—Ç —É–∂–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å"
            else:
                text = "–ß–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:"
            text += "\n\n" \
                    "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."
            await bot.send_message(chat_id, text,
                                   reply_markup=markup)
            await dp.current_state(chat=chat_id, user=chat_id).set_state(Registration.WaitForCategory)
            await dp.current_state(chat=chat_id, user=chat_id).update_data(chat_id=message.chat.id)
            break
    else:
        logging.info("User is not an admin")


@dp.message_handler(AskedQuestion())
async def asked_question(message: types.Message):
    chat_id = message.chat.id
    if p and p.running:
        if p.current == "Questions":
            question = message.text[3:]
            poll = await bot.send_poll(
                chat_id=message.chat.id,
                reply_to_message_id=message.message_id,
                question=f"–ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚òÄÔ∏è–ê—Ç–ª–∞–Ω—Ç–∏–¥–µ?\n"
                f"‚è± {p.time_left//60} –º–∏–Ω",
                options=["–î–∞! ‚úä–ó–∞–¥–∞–≤–∞—Ç—å!", "‚òÅÔ∏è"],
                disable_notification=True)

            add_question(chat_id, question, message.message_id, poll.message_id)
        else:
            a = "–≤–æ–ø—Ä–æ—Å—ã" if p.current == p.QUESTIONS else "–æ—Ç–≤–µ—Ç—ã"
            text = f"‚òÄÔ∏è–ê—Ç–ª–∞–Ω—Ç–∏–¥–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {a}, –Ω–∞–¥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â–µ {p.time_left//60} –º–∏–Ω\n"
            q_id = get_winner_question_id(chat_id)
            logging.info(f"QUID {q_id}")
            reply = None
            if q_id:
                text += f"–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å"
                reply = q_id
            await bot.send_message(chat_id, text, reply_to_message_id=reply)
    else:
        await message.answer("‚òÄÔ∏è–ê—Ç–ª–∞–Ω—Ç–∏–¥–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ /ask_all, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")


@dp.message_handler(AnsweredQuestion())
async def asked_question(message: types.Message):
    chat_id = message.chat.id
    if p and p.running:
        if p.current == "Answers":
            answer = message.text

            poll = await bot.send_poll(
                chat_id=message.chat.id,
                reply_to_message_id=message.message_id,
                question=f"–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç ‚òÄÔ∏è–ê—Ç–ª–∞–Ω—Ç–∏–¥–µ? \n{p.time_left//60} –º–∏–Ω",
                options=["–î–∞! ‚úä–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å!", "‚òÅÔ∏è"],
                disable_notification=True)

            add_answer(chat_id, answer, message.message_id, poll.message_id)
        else:
            a = "–≤–æ–ø—Ä–æ—Å—ã" if p.current == p.QUESTIONS else "–æ—Ç–≤–µ—Ç—ã"
            text = f"‚òÄÔ∏è–ê—Ç–ª–∞–Ω—Ç–∏–¥–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {a}, –Ω–∞–¥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â–µ {p.time_left//60} –º–∏–Ω\n"
            await message.answer(text)
    else:
        await message.answer("‚òÄÔ∏è–ê—Ç–ª–∞–Ω—Ç–∏–¥–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ /ask_all, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")


@dp.message_handler(IsGroup())
async def other(message: types.Message, state: FSMContext):
    state = await state.get_state()
    logging.info(f"what? %s %s", message.text, state)
