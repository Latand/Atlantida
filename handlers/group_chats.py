from aiogram import types
from aiogram.dispatcher.storage import FSMContext

from app import dp, bot, logging

from utils.filters import IsGroup, AskedQuestion, AnsweredQuestion
from utils.pagination import create_pages
from utils.states import Registration
from utils.phases import Phase
import asyncio
from utils.database import add_chat, add_question, add_answer, get_winner_question_id

from aiogram.dispatcher import filters

p: Phase = None


@dp.message_handler(IsGroup(), filters.RegexpCommandsFilter(regexp_commands=['Atlantide ([0-9]*)']))
async def register_chat(message: types.Message, regexp_command):
    chat_id = message.from_user.id
    global p
    if p and p.running:
        a = "#–í(–í–æ–ø—Ä–æ—Å) –∏–ª–∏ #–û(–û—Ç–≤–µ—Ç)" if p.current == p.QUESTIONS else "#–û(–û—Ç–≤–µ—Ç) –∏–ª–∏ #–í(–í–æ–ø—Ä–æ—Å)"
        return await message.answer(
            f"üèõ –ö–ê–¢–ï–ì–û–†–ò–Ø –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {a}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è üå©–°–µ–∞–Ω—Å–∞–°–≤—è–∑–∏")
    timeout = int(regexp_command.group(1))
    if 1 < timeout < 12:
        p = Phase(timeout=timeout * 60)
        await message.answer("üèõ ‚ö°Ô∏è–°–≤—è–∑—å —Å –ö–ê–¢–ï–ì–û–†–ò–Ø —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        asyncio.ensure_future(p.start_phaser())
    else:
        await message.answer("üèõ –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å üå©–°–µ–∞–Ω—Å–∞–°–≤—è–∑–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –æ—Ç 2—Ö –¥–æ 12 –º–∏–Ω—É—Ç.")


@dp.message_handler(IsGroup(), commands=["Atlantide"])
async def register_chat(message: types.Message):
    await message.answer("üèõ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è üóø–ê—Ç–ª–∞–Ω—Ç–∞ –≤ –ö–ê–¢–ï–ì–û–†–ò–Ø –≤–≤–µ–¥–∏—Ç–µ /call 12\n"
                         "–ì–¥–µ 12 - –≤—Ä–µ–º—è –æ–¥–Ω–æ–≥–æ üå©–°–µ–∞–Ω—Å–∞–°–≤—è–∑–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö.")


@dp.message_handler(IsGroup(), commands=["register"])
async def register_chat(message: types.Message):
    chat_id = message.from_user.id
    admins = await message.chat.get_administrators()
    for admin in admins:
        if chat_id == admin.user.id:
            await message.reply("üè° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –î–æ–º–æ–π!\n"
                                "üèõ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–≤–∞ –≤ –õ–° –∏ —É–∫–∞–∂–∏—Ç–µ –í–∞—à–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n")
            exists = add_chat(message.chat.id)
            markup = create_pages()

            if exists:
                text = "üèõ –í–∞—à–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –í–∞—à–µ–≥–æ üè°—á–∞—Ç–∞/–∫–∞–Ω–∞–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
            else:
                text = "üèõ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à üè°—á–∞—Ç/–∫–∞–Ω–∞–ª ‚òÄÔ∏è—Å–≤—è–∑–∞–Ω —Å –ö–ê–¢–ï–ì–û–†–ò–Ø. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –í–∞—à–µ–≥–æ üè°—á–∞—Ç–∞/–∫–∞–Ω–∞–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:"
            text += "\n\n" \
                    "–ù–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            await bot.send_message(chat_id, text,
                                   reply_markup=markup)
            await dp.current_state(chat=chat_id, user=chat_id).set_state(Registration.WaitForCategory)
            await dp.current_state(chat=chat_id, user=chat_id).update_data(chat_id=message.chat.id)
            break
    else:
        logging.info("User is not an admin")


@dp.message_handler(AskedQuestion())
async def asked_question(message: types.Message):
    chat_id = message.chat.id
    if p and p.running:
        if p.current == "Questions":
            question = message.text[3:]
            poll = await bot.send_poll(
                chat_id=message.chat.id,
                reply_to_message_id=message.message_id,
                question=f"üèõ –°–æ–∑–¥–∞—Ç—å üóø–ê—Ç–ª–∞–Ω—Ç–∞ –≤ –ö–ê–¢–ï–ì–û–†–ò–Ø?\n" 
                f"‚è± {p.time_left // 60} –º–∏–Ω",
                options=["‚ö° –°–æ–∑–¥–∞—Ç—å!", "‚òÅÔ∏è"],
                disable_notification=True)

            add_question(chat_id, question, message.message_id, poll.message_id)
        else:
            a = "#–í(–í–æ–ø—Ä–æ—Å) –∏–ª–∏ #–û(–û—Ç–≤–µ—Ç)" if p.current == p.QUESTIONS else "–æ—Ç–≤–µ—Ç—ã –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"
            text = f"üèõ –í–∞—à–∞ –ö–ê–¢–ï–ì–û–†–ò–Ø –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {a}, —Å–ª–µ–¥—É—é—â–∏–π üå©–°–µ–∞–Ω—Å–°–≤—è–∑–∏ —á–µ—Ä–µ–∑ {p.time_left // 60} –º–∏–Ω\n"
            q_id = get_winner_question_id(chat_id)
            logging.info(f"QUID {q_id}")
            reply = None
            if q_id:
                text += f"üèõ –í–∞—à–∞ –ö–ê–¢–ï–ì–û–†–ò–Ø –û–¢–í–ï–ß–ê–ï–¢ –Ω–∞ –Ω–∏–∂–µ—Å–ª–µ–¥—É—é—â–µ–µ üåÄ—Å–æ–æ–±—â–µ–Ω–∏–µ"
                reply = q_id
            await bot.send_message(chat_id, text, reply_to_message_id=reply)
    else:
        await message.answer("üèõ –î–ª—è –Ω–∞—á–∞–ª–∞ üå©–°–µ–∞–Ω—Å–∞–°–≤—è–∑–∏ –≤ –ö–ê–¢–ï–ì–û–†–ò–Ø –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /call")


@dp.message_handler(AnsweredQuestion())
async def asked_question(message: types.Message):
    chat_id = message.chat.id
    if p and p.running:
        if p.current == "Answers":
            answer = message.text

            poll = await bot.send_poll(
                chat_id=message.chat.id,
                reply_to_message_id=message.message_id,
                question=f"üèõ –°–æ–∑–¥–∞—Ç—å üóø–ê—Ç–ª–∞–Ω—Ç–∞ –≤ –ö–ê–¢–ï–ì–û–†–ò–Ø? \n{p.time_left // 60} –º–∏–Ω",
                options=["‚ö°Ô∏è –°–æ–∑–¥–∞—Ç—å!", "‚òÅÔ∏è"],
                disable_notification=True)

            add_answer(chat_id, answer, message.message_id, poll.message_id)
        else:
            a = "–≤–æ–ø—Ä–æ—Å—ã" if p.current == p.QUESTIONS else "–æ—Ç–≤–µ—Ç—ã –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É"
            text = f"üèõ –í–∞—à–∞ –ö–ê–¢–ï–ì–û–†–ò–Ø –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {a} \n –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ - {p.time_left // 60} –º–∏–Ω\n"
            await message.answer(text)
    else:
        await message.answer("üèõ –î–ª—è –Ω–∞—á–∞–ª–∞ üå©–°–µ–∞–Ω—Å–∞–°–≤—è–∑–∏ –≤ –ö–ê–¢–ï–ì–û–†–ò–Ø –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /Call –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è ‚ö°Ô∏è—Å–≤—è–∑–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö")


@dp.message_handler(IsGroup())
async def other(message: types.Message, state: FSMContext):
    state = await state.get_state()
    logging.info(f"what? %s %s", message.text, state)
