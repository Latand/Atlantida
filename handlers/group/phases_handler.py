import asyncio

from aiogram import types
from aiogram.dispatcher import filters

from app import dp, bot, logging, _
from utils.database import (add_question, add_answer,
                            get_winner_question_id, get_category,
                            save_no_phase)
from utils.filters import IsGroup, AskedQuestion, AnsweredQuestionPhase, AnsweredQuestionNoPhase
from utils.phases import send_to_all, get_phase

from aiogram.utils.callback_data import CallbackData

language_callback = CallbackData("language", "code")


# Start phase with specified time
@dp.message_handler(IsGroup(), filters.RegexpCommandsFilter(regexp_commands=['call ([0-9]*)']))
async def register_chat(message: types.Message, regexp_command):
    chat_id = message.chat.id
    category = get_category(chat_id)
    if not category:
        return await message.answer(_("–ß–∞—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ /connect"))
    timeout = int(regexp_command.group(1))
    phase = get_phase(category)

    if phase.running:
        a = _("#–í(–í–æ–ø—Ä–æ—Å) –∏–ª–∏ #–û(–û—Ç–≤–µ—Ç)") if phase.current == phase.QUESTIONS else _("#–û(–û—Ç–≤–µ—Ç) –∏–ª–∏ #–í(–í–æ–ø—Ä–æ—Å)")
        return await message.answer(
            _("üèõ–í–∞—à üè†–¥–æ–º {category} –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {a}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è üå©–°–µ–∞–Ω—Å–∞–°–≤—è–∑–∏").format(
                category=category,
                a=a))
    elif 0 < timeout < 12:
        if not phase.was_the_last(chat_id):
            phase.timeout = timeout * 60
            phase.last_chat_run = chat_id
            await message.answer(_("üèõ ‚ö°Ô∏è–°–≤—è–∑—å —Å {category} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞").format(category=category))
            asyncio.ensure_future(phase.start_phaser())
        else:
            await message.answer(_("üèõ –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. \n"
                                   "–í–∞—à üè°—á–∞—Ç/–∫–∞–Ω–∞–ª –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–ª üå©–°–µ–∞–Ω—Å–°–≤—è–∑–∏ –æ–∂–∏–¥–∞–π—Ç–µ –í–∞—à üåÄ–ü–æ—Ä—è–¥–æ–∫ —á–µ—Ä–µ–∑ ‚ö°Ô∏è1 "))
    else:
        await message.answer(
            _("üèõ –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. "
              "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å üå©–°–µ–∞–Ω—Å–∞–°–≤—è–∑–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –æ—Ç 2—Ö –¥–æ 12 –º–∏–Ω—É—Ç."))


# Start phase with unspecified time
@dp.message_handler(IsGroup(), commands=["call"])
async def register_chat(message: types.Message):
    chat_id = message.chat.id
    category = get_category(chat_id)
    if not category:
        return await message.answer(_("–ß–∞—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ /connect"))

    phase = get_phase(category)
    if not phase.was_the_last(chat_id) and not phase.running:
        phase.last_chat_run = chat_id
        await message.answer(_("üèõ ‚ö°Ô∏è–°–≤—è–∑—å —Å {category} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞").format(category=category))
        asyncio.ensure_future(phase.start_phaser())
    else:
        await message.answer(_("üèõ –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. \n"
                               "–í–∞—à üè°—á–∞—Ç/–∫–∞–Ω–∞–ª –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–ª üå©–°–µ–∞–Ω—Å–°–≤—è–∑–∏ –æ–∂–∏–¥–∞–π—Ç–µ –í–∞—à üåÄ–ü–æ—Ä—è–¥–æ–∫ —á–µ—Ä–µ–∑ ‚ö°Ô∏è1 "))


@dp.message_handler(AnsweredQuestionNoPhase())
async def asked_question(message: types.Message):
    chat_id = message.chat.id
    category = get_category(chat_id)
    phase = get_phase(category)

    if phase.running:
        return
    prefix_q, question = message.reply_to_message.text[0], message.reply_to_message.text[1:]
    if message.text.startswith("!") or message.text.startswith("?"):
        prefix_a, answer = message.text[0], message.text[1:]
    else:
        prefix_a = "!"
        answer = message.text

    def get_tag(prefix):
        return _("–û—Ç–≤–µ—Ç" if prefix == "!" else "–í–æ–ø—Ä–æ—Å")

    tag = f"{prefix_q}{prefix_a} #" + get_tag(prefix_q) + get_tag(prefix_a)
    text = "".join([question, "\n\n", answer, "\n", tag])
    await send_to_all(bot, text, category=category)


@dp.message_handler(AskedQuestion())
async def asked_question(message: types.Message):
    chat_id = message.chat.id
    category = get_category(chat_id)

    phase = get_phase(category)
    if phase.running:
        if phase.current == "Questions":
            question = message.text[1:]
            if add_question(chat_id, question, message.message_id, category=category):
                await message.reply(_("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ"))
            else:
                await message.reply(_("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –≤–∞—à —á–∞—Ç –Ω–∞–±—Ä–∞–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –í–æ–ø—Ä–æ—Å–æ–≤ (10)"))

        else:
            a = _("#–í(–í–æ–ø—Ä–æ—Å—ã) –∏–ª–∏ #–û(–û—Ç–≤–µ—Ç—ã)") if phase.current == phase.QUESTIONS else _("–æ—Ç–≤–µ—Ç—ã –∫ —ç—Ç–æ–π üåÄ–ú—ã—Å–ª–∏")
            text = _("üèõ–í–∞—à üè†–¥–æ–º {category} –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {a}, —Å–ª–µ–¥—É—é—â–∏–π üå©–°–µ–∞–Ω—Å–°–≤—è–∑–∏ —á–µ—Ä–µ–∑ {time} –º–∏–Ω\n").format(
                time=phase.time_left // 60,
                category=category,
                a=a
            )
            q_id = get_winner_question_id(chat_id)
            reply = None
            if q_id:
                text += _("üèõ–í–∞—à üè†–¥–æ–º {category} –û–¢–í–ï–ß–ê–ï–¢ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é üåÄ–ú—ã—Å–ª—å").format(category=category)
                reply = q_id
            await bot.send_message(chat_id, text, reply_to_message_id=reply)
    else:
        question = " ".join([message.text[0], message.text[1:]])
        messages_sent = await send_to_all(bot, question, category=category)
        save_no_phase(messages_sent)


@dp.message_handler(AnsweredQuestionPhase())
async def asked_question(message: types.Message):
    chat_id = message.chat.id
    category = get_category(chat_id)

    phase = get_phase(category)
    if phase.running:
        if phase.current == "Answers":
            answer = message.text

            poll = await bot.send_poll(
                chat_id=message.chat.id,
                reply_to_message_id=message.message_id,
                question=_("üèõ –°–æ–∑–¥–∞—Ç—å üóø–ê—Ç–ª–∞–Ω—Ç–∞ –≤ {category}? \n{time} –º–∏–Ω").format(
                    category=category,
                    time=phase.time_left // 60),
                options=[_("‚ö°Ô∏è –°–æ–∑–¥–∞—Ç—å!"), "‚òÅÔ∏è"],
                disable_notification=True)

            add_answer(chat_id, answer, message.message_id, poll.message_id)
        else:
            a = _("#–í(–í–æ–ø—Ä–æ—Å—ã) –∏–ª–∏ #–û(–û—Ç–≤–µ—Ç—ã)") if phase.current == phase.QUESTIONS else _("–æ—Ç–≤–µ—Ç—ã –∫ —ç—Ç–æ–π üåÄ–ú—ã—Å–ª–∏")

            text = _("üèõ–í–∞—à üè†–¥–æ–º {category} –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {a} \n –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ - {time} –º–∏–Ω\n").format(
                time=phase.time_left // 60,
                category=category,
                a=a
            )
            await message.answer(text)
    else:
        await message.answer(
            _("üèõ –î–ª—è –Ω–∞—á–∞–ª–∞ üå©–°–µ–∞–Ω—Å–∞–°–≤—è–∑–∏ –≤ {category} –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /call").format(category=category))
